#include "calculatorfx.h"
#include "ui_calculatorfx.h"
//#include <QToolButton>
//#include <QPushButton>
#include <QDebug>
#include <QMessageBox>
#include <QtMath>
#include <QMap>
#include <cmath>
CalculatorFX::CalculatorFX(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::CalculatorFX)
{
    ui->setupUi(this);
    ui->lineEdit_Input->installEventFilter(this);
//给函数toolButton添加菜单
    QMenu *menu_function=new QMenu();
    QAction *action_cmp = menu_function->addAction("对任意两个进制数字作比较");//to be improved
    QAction *action_commondiv = menu_function->addAction("求公约数");
    QAction *action3 = menu_function->addAction("求公约数");
    QAction *action2 = menu_function->addAction("求公约数");
    QAction *action2 = menu_function->addAction("求公约数");
    QAction *action2 = menu_function->addAction("求公约数");
    QAction *action2 = menu_function->addAction("求公约数");
    ui->tBtn_function->setMenu(menu_function);
    ui->lineEdit_Input->setFocus();
    calPattern_current="科学计算";
    tri_current="角度制";
    cal_complete=false;
    Ans="@";
    flag_arc=false;
    pi.setNum(qAcos(-1));
    e.setNum(qExp(1));
    connectAllSlots();
}

CalculatorFX::~CalculatorFX()
{
    delete ui;
}

bool CalculatorFX::eventFilter(QObject *watched, QEvent *event)
{
    if(watched==ui->lineEdit_Input)
    {
        if(event->type()==QEvent::MouseButtonRelease&&cal_complete)
        {
            ui->lineEdit_Result->clear();
            cal_complete=false;
        }
    }
    return QWidget::eventFilter(watched, event);
}

void CalculatorFX::connectAllSlots(){
    QPushButton *opNormal_restart[25]={
        ui->pBtn_0,     ui->pBtn_1,         ui->pBtn_2,         ui->pBtn_3,         ui->pBtn_4,
        ui->pBtn_5,     ui->pBtn_6,         ui->pBtn_7,         ui->pBtn_8,         ui->pBtn_9,
        ui->pBtn_A,     ui->pBtn_B,         ui->pBtn_C,         ui->pBtn_D,         ui->pBtn_E,
        ui->pBtn_F,     ui->pBtn_pi,        ui->pBtn_e,         ui->pBtn_lBracket,  ui->pBtn_rbracket,
        ui->pBtn_dot,   ui->pBtn_not,       ui->pBtn_comma,     ui->pBtn_0b,        ui->pBtn_0x
    };

    QPushButton *opNormal_continue[13]={
        ui->pBtn_Add,   ui->pBtn_sub,       ui->pBtn_mul,       ui->pBtn_div,       ui->pBtn_mod,
        ui->pBtn_power, ui->pBtn_square,    ui->pBtn_percent,   ui->pBtn_and,       ui->pBtn_or,
        ui->pBtn_xor,   ui->pBtn_sll,       ui->pBtn_sra
    };

    QPushButton *opFunction[11]={
        ui->pBtn_sin,       ui->pBtn_cos,   ui->pBtn_tan,   ui->pBtn_arcsin,    ui->pBtn_arccos,
        ui->pBtn_arctan,    ui->pBtn_log,   ui->pBtn_lg,    ui->pBtn_ln,        ui->pBtn_sqrt,
        ui->pBtn_abs
    };

    QRadioButton *optionCal[5]={
        ui->rBtn_sciCal,    ui->rBtn_bin,   ui->rBtn_oct,   ui->rBtn_hex,   ui->rBtn_mix
    };

    QRadioButton *optionTri[2]={
        ui->rBtn_angle,     ui->rBtn_radian
    };

    for(auto btn : opNormal_restart){
        connect(btn, &QPushButton::clicked, this, &CalculatorFX::opNormal_restart_clicked);
    }

    for(auto btn : opNormal_continue){
        connect(btn, &QPushButton::clicked, this, &CalculatorFX::opNormal_continue_clicked);
    }

    for(auto btn : opFunction){
        connect(btn, &QPushButton::clicked, this, &CalculatorFX::opFunction_clicked);
    }

    connect(ui->pBtn_equal, &QPushButton::clicked, this, &CalculatorFX::equal_clicked);

    connect(ui->pBtn_Ans, &QPushButton::clicked, this, &CalculatorFX::Ans_clicked);

    connect(ui->pBtn_DEL, &QPushButton::clicked, this, &CalculatorFX::DEL_clicked);

    connect(ui->pBtn_AC, &QPushButton::clicked, this, &CalculatorFX::AC_clicked);

    for(auto btn : optionCal){
        connect(btn, &QRadioButton::toggled, this, &CalculatorFX::optionCal_toggled);
    }

    for(auto btn : optionTri){
        connect(btn, &QRadioButton::toggled, this, &CalculatorFX::optionTri_toggled);
    }
}

void CalculatorFX::opNormal_restart_clicked(){
    QPushButton* pBtn = qobject_cast<QPushButton*>(sender());
    if(cal_complete==true){
        ui->lineEdit_Input->clear();
        ui->lineEdit_Result->clear();
    }
    int temp_position=ui->lineEdit_Input->cursorPosition();
    QString temp=ui->lineEdit_Input->text().insert(temp_position,pBtn->text());
    ui->lineEdit_Input->setText(temp);
    ui->lineEdit_Input->setCursorPosition(temp_position+pBtn->text().size());
    ui->lineEdit_Input->setFocus();
    cal_complete=false;
}

void CalculatorFX::opNormal_continue_clicked(){
    QPushButton* pBtn = qobject_cast<QPushButton*>(sender());
    if(cal_complete==true){
        ui->lineEdit_Input->setText("Ans");
        ui->lineEdit_Result->clear();
    }
    int temp_position=ui->lineEdit_Input->cursorPosition();
    QString temp=ui->lineEdit_Input->text().insert(temp_position,pBtn->text());
    ui->lineEdit_Input->setText(temp);
    ui->lineEdit_Input->setCursorPosition(temp_position+pBtn->text().size());
    ui->lineEdit_Input->setFocus();
    cal_complete=false;
}

void CalculatorFX::opFunction_clicked(){
    QPushButton* pBtn = qobject_cast<QPushButton*>(sender());
    if(cal_complete==true){
        ui->lineEdit_Input->clear();
        ui->lineEdit_Result->clear();
    }
    int temp_position=ui->lineEdit_Input->cursorPosition();
    QString addition=pBtn->text()+"(";
    QString temp=ui->lineEdit_Input->text().insert(temp_position,addition);
    ui->lineEdit_Input->setText(temp);
    ui->lineEdit_Input->setCursorPosition(temp_position+addition.size());
    ui->lineEdit_Input->setFocus();
    cal_complete=false;
}

void CalculatorFX::equal_clicked(){
    semi_stack.clear();
    QString sys_temp=CalculatorFX::sysPre(calPattern_current,ui->lineEdit_Input->text());
    CalculatorFX::preprocessing(sys_temp,semi_stack);
    QString result_dec=CalculatorFX::calculate(semi_stack, calPattern_current, tri_current);
    QString result_done=CalculatorFX::sysConversion("科学计算", calPattern_current, result_dec);
    ui->lineEdit_Result->setText(result_done);
    Ans=result_dec;
    cal_complete=true;
}

void CalculatorFX::Ans_clicked(){
    if(Ans=="@"){
        QMessageBox::warning(this,"warning","暂无Ans");
        return;
    }
    if(cal_complete==true){
        ui->lineEdit_Input->clear();
        ui->lineEdit_Result->clear();
    }
    int temp_position=ui->lineEdit_Input->cursorPosition();
    QString temp=ui->lineEdit_Input->text().insert(temp_position,ui->pBtn_Ans->text());
    ui->lineEdit_Input->setText(temp);
    ui->lineEdit_Input->setCursorPosition(temp_position+ui->pBtn_Ans->text().size());
    ui->lineEdit_Input->setFocus();
    cal_complete=false;
}
//to be improved//del sin//键盘//方向
void CalculatorFX::DEL_clicked(){
    if(cal_complete==true){
        return;
    }
    ui->lineEdit_Input->backspace();
    ui->lineEdit_Input->setFocus();
}

void CalculatorFX::AC_clicked(){
    ui->lineEdit_Input->clear();
    ui->lineEdit_Result->clear();
    ui->lineEdit_Input->setFocus();
    cal_complete=false;
}
//to be improved//toggled
void CalculatorFX::optionCal_toggled(){
    QRadioButton* rBtn = qobject_cast<QRadioButton*>(sender());
    if(rBtn->isChecked()){
        if(cal_complete){
            ui->lineEdit_Result->setText(CalculatorFX::sysConversion(calPattern_current,rBtn->text(),ui->lineEdit_Result->text()));
        }
        else{
            ui->lineEdit_Input->setFocus();
        }
        calPattern_current=rBtn->text();
    }   
}

void CalculatorFX::optionTri_toggled(){
    QRadioButton* rBtn = qobject_cast<QRadioButton*>(sender());
    if(rBtn->isChecked()){
        if(cal_complete&&ui->lineEdit_Input->text().contains("arc")){//有问题
            ui->lineEdit_Result->setText(CalculatorFX::triConversion(rBtn->text(),ui->lineEdit_Result->text()));
        }
        else if(!cal_complete){
            ui->lineEdit_Input->setFocus();
        }
        tri_current=rBtn->text();
    }   
}

QString CalculatorFX::sysConversion(QString sys_current,QString sys_target,QString num){
    if(sys_current==sys_target)
        return num;
    int temp;
    bool ok;
    QString newNum;
    if(sys_current=="科学计算")
        temp=num.toInt(&ok,10);
    if(sys_current=="二进制")
        temp=num.toInt(&ok,2);
    if(sys_current=="八进制")
        temp=num.toInt(&ok,8);
    if(sys_current=="十六进制")
        temp=num.toInt(&ok,16);
    if(sys_current=="混合进制"){
        if(num.startsWith("0b"))
            temp=num.toInt(&ok,2);
        else
            temp=num.toInt(&ok,0);
    }
    if(ok==false)
        return "error";
    if(sys_target=="科学计算")
        return newNum.setNum(temp,10);
    if(sys_target=="二进制")
        return newNum.setNum(temp,2);
    if(sys_target=="八进制")
        return newNum.setNum(temp,8);
    if(sys_target=="十六进制")
        return newNum.setNum(temp,16);
    if(sys_target=="混合进制"){
        if(sys_current=="科学计算")
            return num;
        if(sys_current=="二进制")
            return "0b"+num;
        if(sys_current=="八进制")
            return "0"+num;
        if(sys_current=="十六进制")
            return "0x"+num;
    }
}

QString CalculatorFX::triConversion(QString tri_target,QString num){
    bool ok;
    double temp=num.toDouble(&ok);
    if(ok==false)
        return "error";
    if(tri_target=="角度制")
        temp=qRadiansToDegrees(temp);
    if(tri_target=="弧度制")
        temp=qDegreesToRadians(temp);
    QString newNum;
    return newNum.setNum(temp);
}
//进制处理Ans(异常）
QString CalculatorFX::sysPre(QString sys_current,QString expression){
    expression.replace("Ans", "ans");
    if(sys_current=="科学计算")
        return expression;
    for(int i=0;expression[i]!='\0';){
        int i1;
        if(expression[i].isDigit()||(expression[i]>='A'&&expression[i]<='F')||expression[i]=='b'||expression[i]=='x'){
            for(i1=i+1;expression[i1].isDigit()||(expression[i]>='A'&&expression[i]<='F')||expression[i]=='b'||expression[i]=='x';++i1);
            QString exp_temp=expression.mid(i,i1-i);
            exp_temp=CalculatorFX::sysConversion(sys_current, "科学计算", exp_temp);
            expression.replace(i,i1-i,exp_temp);
            i=i1;
        }
        else{
            ++i;
        }
    }
    return expression;
}

void CalculatorFX::preprocessing(QString expression, QVector<QString>& semi){
    expression.replace("ans", Ans);
    expression.replace("π",pi);
    expression.replace("e",e);
    while(expression.contains("-+")||expression.contains("+-")||expression.contains("++")||expression.contains("--")){
        expression.replace("+-","-");
        expression.replace("-+","-");
        expression.replace("++","+");
        expression.replace("--","+");
    }
    CalculatorFX::stack_pre(expression, semi);
    CalculatorFX::sign_pre(semi);
    CalculatorFX::omittedMul_pre(semi);
}

QString CalculatorFX::calculate(QVector<QString>& semi, QString sysCurrent, QString triCurrent){
    QVector<QString> postExp;
    CalculatorFX::toPost(semi, postExp);
    return CalculatorFX::calculatePost(postExp, sysCurrent, triCurrent);
}

void CalculatorFX::sign_pre(QVector<QString>& semi){
    QVector<QString> opNotice;
    opNotice<<"+"<<"-"<<"*"<<"/"<<"mod"<<"^"<<"<<"<<">>"<<"("<<"and"<<"or"<<"not"<<"xor";
    if(semi[0]=="+"||semi[0]=="-"){
        semi.push_front("0");
        semi.push_front("(");
        semi.insert(4,")");
    }
    for(int i=1;i<semi.length();++i){
        if(semi[i]=="+"||semi[i]=="-"){
            if(opNotice.contains(semi[i-1])){
                semi.insert(i,"0");
                semi.insert(i,"(");
                semi.insert(i+4,")");
                i=i+4;
            }
        }
    }
}

void CalculatorFX::omittedMul_pre(QVector<QString>& semi){
    QVector<QString> opNotice;//之前已经将pi和e处理为数字，无需再次处理
    opNotice<<"("<<"sin"<<"cos"<<"tan"<<"arcsin"<<"arccos"<<"arctan"<<"log"<<"ln"<<"lg"<<"abs"<<"sqrt"<<"not";
    for(int i=0;i<semi.length()-1;++i){
        if(semi[i][0].isDigit()){
            if(opNotice.contains(semi[i+1])){
                semi.insert(i+1,"*");
                i=i+1;
            }
        }
    }
}

void CalculatorFX::stack_pre(QString expression, QVector<QString>& semi){
    QVector<QString> opSTD1, opSTD2, opSTD3, opSTD4, opSTD6;//27op
    opSTD1<<"+"<<"-"<<"*"<<"/"<<"^"<<"%"<<"("<<")"<<",";
    opSTD2<<"or"<<"lg"<<"ln"<<"<<"<<">>";
    opSTD3<<"mod"<<"log"<<"abs"<<"and"<<"xor"<<"not"<<"sin"<<"cos"<<"tan";
    opSTD4<<"sqrt";
    opSTD6<<"arcsin"<<"arccos"<<"arctan";
    for(int i=0;expression[i]!='\0';){
        if(expression[i].isDigit()){
            int i1;
            for(i1=i+1;expression[i1].isDigit()||expression[i1]=='.';++i1);
            semi.push_back(expression.mid(i,i1-i));
            i=i1;
        }
        if(opSTD1.contains(expression.mid(i,1))){
            semi.push_back(expression.mid(i,1));
            ++i;
        }
        if(opSTD2.contains(expression.mid(i,2))){
            semi.push_back(expression.mid(i,2));
            i=i+2;
        }
        if(opSTD3.contains(expression.mid(i,3))){
            semi.push_back(expression.mid(i,3));
            i=i+3;
        }
        if(opSTD4.contains(expression.mid(i,4))){
            semi.push_back(expression.mid(i,4));
            i=i+4;
        }
        if(opSTD6.contains(expression.mid(i,6))){
            semi.push_back(expression.mid(i,6));
            i=i+6;
        }
    }
}

void CalculatorFX::toPost(QVector<QString>& semi, QVector<QString>& postExp){
    QMap<QString, int> priority;
    priority["or"]=1;
    priority["xor"]=2;
    priority["and"]=3;
    priority[">>"]=4;
    priority["<<"]=4;
    priority["+"]=5;
    priority["-"]=5;
    priority["*"]=6;
    priority["/"]=6;
    priority["mod"]=6;
    priority["^"]=7;
    priority["not"]=8;//按位求反码
    priority["%"]=9;
    priority["sin"]=10;
    priority["cos"]=10;
    priority["tan"]=10;
    priority["arcsin"]=10;
    priority["arccos"]=10;
    priority["arctan"]=10;
    priority["log"]=10;
    priority["ln"]=10;
    priority["lg"]=10;
    priority["sqrt"]=10;
    priority["abs"]=10;
    priority["("]=10;
    QVector<QString> op_stack;
    for(int i=0;i<semi.length();++i){
        if(semi[i][0].isDigit())
            postExp.push_back(semi[i]);
        else if(semi[i]=="(")
            op_stack.push_back(semi[i]);
        else if(semi[i]==")"){
            while(op_stack.last()!="("){
                postExp.push_back(op_stack.last());
                op_stack.removeLast();
            }
            op_stack.removeLast();
        }
        else if(semi[i]==","){
            while(op_stack.last()!="("){
                postExp.push_back(op_stack.last());
                op_stack.removeLast();
            }
        }
        else{
            while(1){
                if(op_stack.isEmpty()||op_stack.last()=="("||priority[semi[i]]>priority[op_stack.last()]){
                    op_stack.push_back(semi[i]);
                    break;
                }
                postExp.push_back(op_stack.last());
                op_stack.removeLast();
            }
        }
    }
    while(!op_stack.isEmpty()){
        postExp.push_back(op_stack.last());
        op_stack.removeLast();
    }
}

QString CalculatorFX::calculatePost(QVector<QString>& postExp, QString sysCurrent, QString triCurrent){
    QVector<QString> resultExp;
    if(sysCurrent=="科学计算"){
        for(int i=0;i<postExp.length();++i){
            if(postExp[i][0].isDigit())
                resultExp.push_back(postExp[i]);
            else{
                if(postExp[i]=="+"){
                    double temp1=resultExp.last().toDouble();
                    resultExp.removeLast();
                    double temp2=resultExp.last().toDouble();
                    resultExp.removeLast();
                    QString result1;
                    result1.setNum(temp2+temp1);
                    resultExp.push_back(result1);
                }
                if(postExp[i]=="-"){
                    double temp1=resultExp.last().toDouble();
                    resultExp.removeLast();
                    double temp2=resultExp.last().toDouble();
                    resultExp.removeLast();
                    QString result1;
                    result1.setNum(temp2-temp1);
                    resultExp.push_back(result1);
                }
                if(postExp[i]=="*"){
                    double temp1=resultExp.last().toDouble();
                    resultExp.removeLast();
                    double temp2=resultExp.last().toDouble();
                    resultExp.removeLast();
                    QString result1;
                    result1.setNum(temp2*temp1);
                    resultExp.push_back(result1);
                }
                if(postExp[i]=="/"){
                    double temp1=resultExp.last().toDouble();
                    resultExp.removeLast();
                    double temp2=resultExp.last().toDouble();
                    resultExp.removeLast();
                    QString result1;
                    result1.setNum(temp2/temp1);
                    resultExp.push_back(result1);
                }
                if(postExp[i]=="mod"){
                    double temp1=resultExp.last().toDouble();
                    resultExp.removeLast();
                    double temp2=resultExp.last().toDouble();
                    resultExp.removeLast();
                    QString result1;
                    result1.setNum(fmod(temp2,temp1));
                    resultExp.push_back(result1);
                }
                if(postExp[i]=="^"){
                    double temp1=resultExp.last().toDouble();
                    resultExp.removeLast();
                    double temp2=resultExp.last().toDouble();
                    resultExp.removeLast();
                    QString result1;
                    result1.setNum(qPow(temp2,temp1));
                    resultExp.push_back(result1);
                }
                if(postExp[i]=="%"){
                    double temp1=resultExp.last().toDouble();
                    resultExp.removeLast();
                    QString result1;
                    result1.setNum(temp1/100);
                    resultExp.push_back(result1);
                }
                if(postExp[i]=="sin"){
                    double temp1=resultExp.last().toDouble();
                    resultExp.removeLast();
                    if(triCurrent=="角度制")
                        temp1=qDegreesToRadians(temp1);
                    QString result1;
                    result1.setNum(qSin(temp1));
                    resultExp.push_back(result1);
                }
                if(postExp[i]=="cos"){
                    double temp1=resultExp.last().toDouble();
                    resultExp.removeLast();
                    if(triCurrent=="角度制")
                        temp1=qDegreesToRadians(temp1);
                    QString result1;
                    result1.setNum(qCos(temp1));
                    resultExp.push_back(result1);
                }
                if(postExp[i]=="tan"){
                    double temp1=resultExp.last().toDouble();
                    resultExp.removeLast();
                    if(triCurrent=="角度制")
                        temp1=qDegreesToRadians(temp1);
                    QString result1;
                    result1.setNum(qTan(temp1));
                    resultExp.push_back(result1);
                }
                if(postExp[i]=="arcsin"){
                    double temp1=resultExp.last().toDouble();
                    resultExp.removeLast();
                    temp1=qAsin(temp1);
                    if(triCurrent=="角度制")
                        temp1=qRadiansToDegrees(temp1);
                    QString result1;
                    result1.setNum(temp1);
                    resultExp.push_back(result1);
                }
                if(postExp[i]=="arccos"){
                    double temp1=resultExp.last().toDouble();
                    resultExp.removeLast();
                    temp1=qAcos(temp1);
                    if(triCurrent=="角度制")
                        temp1=qRadiansToDegrees(temp1);
                    QString result1;
                    result1.setNum(temp1);
                    resultExp.push_back(result1);
                }
                if(postExp[i]=="arctan"){
                    double temp1=resultExp.last().toDouble();
                    resultExp.removeLast();
                    temp1=qAtan(temp1);
                    if(triCurrent=="角度制")
                        temp1=qRadiansToDegrees(temp1);
                    QString result1;
                    result1.setNum(temp1);
                    resultExp.push_back(result1);
                }
                if(postExp[i]=="abs"){
                    double temp1=resultExp.last().toDouble();
                    resultExp.removeLast();
                    QString result1;
                    result1.setNum(qFabs(temp1));
                    resultExp.push_back(result1);
                }
                if(postExp[i]=="sqrt"){                             //nan
                    double temp1=resultExp.last().toDouble();
                    resultExp.removeLast();
                    QString result1;
                    result1.setNum(qSqrt(temp1));
                    resultExp.push_back(result1);
                }
                if(postExp[i]=="ln"){
                    double temp1=resultExp.last().toDouble();
                    resultExp.removeLast();
                    QString result1;
                    result1.setNum(qLn(temp1));
                    resultExp.push_back(result1);
                }
                if(postExp[i]=="lg"){
                    double temp1=resultExp.last().toDouble();
                    resultExp.removeLast();
                    QString result1;
                    result1.setNum(qLn(temp1)/qLn(10));
                    resultExp.push_back(result1);
                }
                if(postExp[i]=="log"){
                    double temp1=resultExp.last().toDouble();
                    resultExp.removeLast();
                    double temp2=resultExp.last().toDouble();
                    resultExp.removeLast();
                    QString result1;
                    result1.setNum(qLn(temp1)/qLn(temp2));
                    resultExp.push_back(result1);
                }
            }
        }
    }
    else{
        for(int i=0;i<postExp.length();++i){
            if(postExp[i][0].isDigit())
                resultExp.push_back(postExp[i]);
            else{
                if(postExp[i]=="+"){
                    int temp1=resultExp.last().toInt();
                    resultExp.removeLast();
                    int temp2=resultExp.last().toInt();
                    resultExp.removeLast();
                    QString result1;
                    result1.setNum(temp2+temp1);
                    resultExp.push_back(result1);
                }
                if(postExp[i]=="-"){
                    int temp1=resultExp.last().toInt();
                    resultExp.removeLast();
                    int temp2=resultExp.last().toInt();
                    resultExp.removeLast();
                    QString result1;
                    result1.setNum(temp2-temp1);
                    resultExp.push_back(result1);
                }
                if(postExp[i]=="*"){
                    int temp1=resultExp.last().toInt();
                    resultExp.removeLast();
                    int temp2=resultExp.last().toInt();
                    resultExp.removeLast();
                    QString result1;
                    result1.setNum(temp2*temp1);
                    resultExp.push_back(result1);
                }
                if(postExp[i]=="/"){
                    int temp1=resultExp.last().toInt();
                    resultExp.removeLast();
                    int temp2=resultExp.last().toInt();
                    resultExp.removeLast();
                    QString result1;
                    result1.setNum(temp2/temp1);
                    resultExp.push_back(result1);
                }
                if(postExp[i]=="mod"){
                    int temp1=resultExp.last().toInt();
                    resultExp.removeLast();
                    int temp2=resultExp.last().toInt();
                    resultExp.removeLast();
                    QString result1;
                    result1.setNum(temp2%temp1);
                    resultExp.push_back(result1);
                }
                if(postExp[i]=="abs"){
                    int temp1=resultExp.last().toInt();
                    resultExp.removeLast();
                    QString result1;
                    result1.setNum(qFabs(temp1));
                    resultExp.push_back(result1);
                }
            }
        }
    }
    return resultExp[0];
}





















